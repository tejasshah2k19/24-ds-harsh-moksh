                    DS 

Linear                            NonLinear 
array                               tree
statck                              graph 
queue 
linked list 


searching ->
        linear search 
        binary search 

sorting ->
    bubble sort 
    selection sort 
    insertion sort 
    merge sort 
    **quick 
-------------------------------------------------------------------------------------------------


array ->  index 
            0 - size-1 

------------------------------------------------------------------------------
STACK -> 

last in first out -> LiFo -> stack 


ticket -> X Y Z


stack of book 
ctrl+z 
whatsapp 
photoGallery 
history 


checkout -> 500qty -> 500 order -> payment -> 

stack -> LiFo 

add : PUSH  
display :DISPLAY 
remove : POP 


---------------------------------------------------------------------------
String reverse: using stack : LiFo 

Enter string 
royal
layor 
---------------------------------------------------------------------------
STACK : LiFo -> Last In First Out 

QUEUE : FiFo -> First In First Out 

ticket book 
typing -> 

process execution queue -> 

printer -> print 

--------------------------------------------------------------------------

array 
function 
structure 
recursion
DMA


multivalue -> array 


name:char[30]
fees:int 
batch:char[10]
year:int 
----------------------------------------------------

searching ->
        linear search 
        binary search 


int a[]={23,4,7,65,43,23,45,67,89};


search = 1000 
NotFound 

search = 89 
Found 


linear search -> time complexity-> 

Big O -> O(n)
 
BinarySearch :----> 


10 20 30 40 50 60 70 80 90 100

search:10
search:50
search:90
search:250
search:5 


0                         8    9
10   20 30 40 50 60 70 80 90  100 
                          mid  max
                                     min   
                               mid 

search : 250 

mid = (min+max)/2  //4

1: a[mid] == search : found 

2: search < a[mid] : 
    max = mid - 1 

3: search > a[mid] : 
     min = mid + 1 


------------------------------------------------

recursion -> function calling itself 
             self calling .
it always required BASE condition / BASE CASE 
    BASE CASE -> is the termination for the recursion 

    we can not use break statement in recursion to terminate the calling 
    *break will only use when we have switch/loop 


-----------------------------------------------




















