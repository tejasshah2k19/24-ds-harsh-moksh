                    DS 

Linear                            NonLinear 
array                               tree
statck                              graph 
queue 
linked list 


searching ->
        linear search 
        binary search 

sorting ->
    bubble sort 
    selection sort 
    insertion sort 
    merge sort 
    **quick 
-------------------------------------------------------------------------------------------------


array ->  index 
            0 - size-1 

------------------------------------------------------------------------------
STACK -> 

last in first out -> LiFo -> stack 


ticket -> X Y Z


stack of book 
ctrl+z 
whatsapp 
photoGallery 
history 


checkout -> 500qty -> 500 order -> payment -> 

stack -> LiFo 

add : PUSH  
display :DISPLAY 
remove : POP 


---------------------------------------------------------------------------
String reverse: using stack : LiFo 

Enter string 
royal
layor 
---------------------------------------------------------------------------
STACK : LiFo -> Last In First Out 

QUEUE : FiFo -> First In First Out 

ticket book 
typing -> 

process execution queue -> 

printer -> print 

--------------------------------------------------------------------------

array 
function 
structure 
recursion
DMA


multivalue -> array 


name:char[30]
fees:int 
batch:char[10]
year:int 
----------------------------------------------------

searching ->
        linear search 
        binary search 


int a[]={23,4,7,65,43,23,45,67,89};


search = 1000 
NotFound 

search = 89 
Found 


linear search -> time complexity-> 

Big O -> O(n)
 
BinarySearch :----> 


10 20 30 40 50 60 70 80 90 100

search:10
search:50
search:90
search:250
search:5 


0                         8    9
10   20 30 40 50 60 70 80 90  100 
                          mid  max
                                     min   
                               mid 

search : 250 

mid = (min+max)/2  //4

1: a[mid] == search : found 

2: search < a[mid] : 
    max = mid - 1 

3: search > a[mid] : 
     min = mid + 1 


------------------------------------------------

recursion -> function calling itself 
             self calling .
it always required BASE condition / BASE CASE 
    BASE CASE -> is the termination for the recursion 

    we can not use break statement in recursion to terminate the calling 
    *break will only use when we have switch/loop 


--------------------------------------------------------------------
    MERGE Sort 


1)       
        a = [10,20,30,40,50]
                          i
        b = [5,15,25,35,45]
                            j
        c=[5,10,15,20,25,30,35,40,45,50] merge a and b into c 
                                       k 



--------------------------------------------------------------------


quick sort 

10  80  30  90  40  50  70

               
small  -> left 
big    -> right 

10  80  30  90  40  50  70


left small 
right big 

                        pivot 
10  50  30  40  70  80  90
             

                        pivot  
10  50  30  40  70  80  90
                i 
                j


--------------------------------------------------------------

23 45 67 89 9 87 65 43

           
                    pivot 
23 9 67 89 45 87 65 43
     i
     j 
-------------------------------------------------------------

bubble  -> swap 

selection -> less swap 

insertion -> iteration 

merge -> 

quick -> less 

radix ->


10  30  20  
logic -> sort -> 
10 20   30 

--------------------------------------------------------------




stack -> 

    conversion => 

    infix to prefix 
    infix to postfix


    infix   a+b 
    prefix  +ab 
    postfix ab+


    infix -> prefix
    infix -> postfix

    a+b -> +ab 
    a*b -> ab* 

    a+b*c 
    5+2*9+19 -> prefix -> stack push
    

    a+b*c -> prefix -> stack -> ans 



a+b*c/d  => c/d => wrong 
b*c 

()     left to right 
^ ~ $  right to left 
/ *    left to right 
+ -    left to right 


a*b/c -> a*b {left to right}
a$b~c -> b~c {right to left}


infix -> prefix 

a+b*c-d 

a +  *bc  - d

+a*bc - d 

-+a*bcd 
----------------------------------------------------------


87,65,43,24,56,78,98,76,54,34


87,65,43,24,56,78,98,76,54,34




23,45,67,89,87,65,43,34,56,78,9,21

-----------------------------------------------------------

int main(){
    int a;//4 byte 

    //5 minute 



}
//end 


server -> 100000 * 4 => 4,00,000 byte 

single user -> 
multi user -> 


2 gb -> 100 user -> 150
4 gb -> 
8 gb -> 

autoscaling --> 


DMA -> 

---------------------------------------------------------------------
memory allocate -> 
    calloc 
    malloc 
    
release memory ->
    free 

existing allcoated -> resize --->
    realloc 


which header file -> stdlib.h 

----------------------------------------------------------------------
    calloc +  { n number ,  multiple block }
    malloc +  { single block with n size }
    free   - 

    int a;//4 byte 
    int a[5]; //4 byte * 5 => 20byte 



    int a -> malloc 
    int a[] -> calloc 


    float fp; //malloc
    char c; //malloc
    int *p; //malloc
    struct student s; //malloc  
    struct student s[5];//calloc 


    calloc -> memory in continue 
    malloc -> memory in random [ available order ]
-------------------------------------------------------------------



single block -> malloc 
multiple block -> calloc 

free 
realloc 


--------------------------------------------------------------------
int a; //1 value of integer 

int a[5]; // 5 value of integer 
    array is a collection of same type of data type 

struct student; // n value , mix data type 
    is a collection of mixture type of data 

---------------------------------------------------------------------

royal ->    student-> studentId , firstName,lastName,batch,year,fees, 

product -> productId , price , discount , author , 



struct student{
    int studentId;
    char studentName[20];
    char batch[20];
    int fees ;
};


struct student jay;[48]    {studentId,studentName,batch,fees}
struct student parth;[48]  {studentId,studentName,batch,fees}
struct student jeet;[48]   {studentId,studentName,batch,fees}
struct student harsh;[48]  {studentId,studentName,batch,fees}


q: how to access studentId ? singel data item? 
ans : to access the data using ref we need to use dot  . operator 

jay.studentId 
parth.studentName 

q: how to access studentId if struct ref is a pointer type ? singel data item? 
ans : arrow operator -> 


-----------------------------------------------------------------------

















































































  


















