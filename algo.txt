insert last : 


5	10	20	30	40	50	60	
	first                          save  



step 1 : 
	if avial = null then 
		Write "Availability Stack is Empty"
	else 
		new_node = avail
step 2: 	
	new_node->info = num  
	new_node->link = NULL 


step3: 	save = first 
	repeat while save->link != null
			save=save->link 
	save->link = new_node 
 
step 4: exit 


insert beg : 

step 1 : 
	if avial = null then 
		Write "Availability Stack is Empty"
	else 
		new_node = avail

step 2: 	
	new_node->info = num  
	new_node->link = first 
	first = new_node 

step 3:
	exit 



insert any : 
						first
	10	20	30	40	50	60	70	80	
					            90
	key=60



step 1 : 
	if avail = null then 
		Write "Availability Stack is Empty"
	else 
		new_node = avail
		avail = avail->link 

step 2: 

		if first = NULL then
			new_node -> info = x 
			new_node->link = NULL 
			first = new_node 

step3: 		else 
			save = first

			repeat while save != NULL and save->info != key
					save= save->link	

			if save = NULL then 
				write "invalid key" 
			else 
				new_node->info = X 
				new_node->link = save->link 
				save->link = new_node

 
step4: exit 			 
			
	
-------------------------------------------------------------------------------------------------------------------------------


del  beg : 



step 1: 
	if first = null then 
		write "list is empty" 


step 2:  
	if first->link = NULL then
		return first->info 
		first = null 
  
 	else
		return first->info 
		first = first->link 

step 4: exit 



del last :



step1 : 
	if first = null then
		write "list is empty" 


step2 : 
	if first->link = null then 
		return first->info
		first = null 
	else 
		save = first 
		repeat while save->link != null then 
			save=save->link 
		pred = save 
		save = save->link 
		pred->link = null 
		return save->info
step 3:
	exit 

	
del any : 

step1 : 
	if first = null then
		write "list is empty" 

step2 : 
	if first->link = null and first->info = key then 
		return first->info
		first = null 
	else 
		pred = first 
		
		repeat while pred!=null and pred->link->info != key
				pred=pred->link

		if pred = null then 
			write "invalid key" 
		else 
			save = pred->link 
			pred->link = save->link 
			return save->info 

step 3: 
		exit 


--------------------------------------------------------------------------------------------------


search and count 

-------------------------------------------------------------------------------------

malloc -> memory? 

algo -> avail 


tmp = avail
avail = avail->link  
  
		
if avail = null then 

else 
	new_node = avail 
	avail = avail->link 

-----------------------------------------------------

10	20	30	40	50	60	70	80	90	

step 1:  [ initilize ]
		 i <- 0
		 flag <- 0  

step 2 :  repeat while i<N 
			if ARRAY[i] = key then 
				flag <- 1
				write "success"
				write "found at i+1 location" 
			i <- i+1

step 3:  if flag = 0 then 
			write "not found" 

step 4: exit 

----------------------------------------------------------

binary search -> 
	1) prior condition -> array must be sorte 
	
you have to assume your array is sorted 

0	1	2	3	4	5	6	7	8	9		
10	20	30	40	50	60	70	80	90	100 
low 		high
				mid 

key = 30

step 1: 
	initilize 
	low <- 0 
	high <- N-1 
	flag <- 0 

step 2:
	repeat while low <= high 
	mid <- (low + high)/2 
	if A[mid] = key then 
		flag <- 1 
		write "success" 
	else if A[mid] > key then 
		high <- mid - 1 
	else 
		low <- mid + 1 

step 3: 
	if flag = 0 then 
		write "not found" 

step 4: exit  

------------------------------------------------------------------------
sort -> insertion 


23,45,67,89,09,87,65,43

				   i
9, 23 ,45, 67, 87, 89, 65, 43
            j     

				 tmp=87 
j = i-1 

if tmp < a[j] then 
	a[j+1] <- a[j]


a[j+1] <- tmp 

------------------------------------------------------------------------































	 
